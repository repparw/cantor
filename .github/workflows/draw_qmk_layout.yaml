name: Draw QMK Keymap Layout

on:
  push:
    branches: [ "master" ]
    paths:
      - 'keyboards/cantor/keymaps/repparw/**'
      - '.github/workflows/draw_qmk_layout.yaml'

  # Allow manual triggering via the GitHub Actions tab
  workflow_dispatch:

permissions:
  contents: write

jobs:
  draw_layout:
    name: Draw Keymap SVG
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install keymap-drawer
        run: pipx install keymap-drawer

      - name: Install QMK CLI
        run: pip install qmk

      - name: Setup QMK Environment
        run: qmk setup --yes --home /github/qmk_firmware

      - name: Define Paths and Names
        id: paths
        run: |
          echo "keymap_c_file=keyboards/cantor/keymaps/repparw/keymap.c" >> $GITHUB_OUTPUT
          echo "output_yaml=docs/layout_parsed.yaml" >> $GITHUB_OUTPUT
          echo "output_svg=docs/layout.svg" >> $GITHUB_OUTPUT
          echo "qmk_keyboard_name=cantor" >> $GITHUB_OUTPUT
          echo "qmk_keymap_name=repparw" >> $GITHUB_OUTPUT

      - name: Create Output Directory
        run: mkdir -p docs

      - name: Check for Keymap C File
        id: check_keymap
        uses: andstor/file-existence-action@v3
        with:
          files: "${{ steps.paths.outputs.keymap_c_file }}"

      - name: Convert C to JSON and Parse
        if: steps.check_keymap.outputs.files_exists == 'true'
        run: |
          # Tell QMK CLI where the user's keymap overlay is relative to qmk_firmware
          # `pwd` gives the root of the checked-out user repo (repparw/cantor)
          qmk config user.overlay_dir=$(pwd)

          # Run conversion and pipe to parser
          # The '-kb' and '-km' provide context for c2json
          # The final argument is the specific C file to convert
          # The output (JSON) goes to stdout, piped (|) to keymap parse
          # 'keymap parse -q -' reads QMK JSON ('-q') from stdin ('-')
          qmk c2json -kb ${{ steps.paths.outputs.qmk_keyboard_name }} -km ${{ steps.paths.outputs.qmk_keymap_name }} ${{ steps.paths.outputs.keymap_c_file }} | \
          keymap parse -q - > "${{ steps.paths.outputs.output_yaml }}"
          # Note: The example had "-c 10" in parse. Add if needed: keymap parse -c 10 -q - > ...

      - name: Check for Parsed YAML
        id: check_yaml
        uses: andstor/file-existence-action@v3
        if: steps.check_keymap.outputs.files_exists == 'true'
        with:
          files: "${{ steps.paths.outputs.output_yaml }}"

      - name: Draw SVG from YAML using QMK layout
        if: steps.check_yaml.outputs.files_exists == 'true'
        run: |
          keymap draw "${{ steps.paths.outputs.output_yaml }}" \
            --qmk-keyboard "${{ steps.paths.outputs.qmk_keyboard_name }}" \
            > "${{ steps.paths.outputs.output_svg }}"

      - name: Check for Generated SVG
        id: check_svg
        uses: andstor/file-existence-action@v3
        if: steps.check_yaml.outputs.files_exists == 'true'
        with:
          files: "${{ steps.paths.outputs.output_svg }}"

      - name: Commit updated SVG and YAML
        if: steps.check_svg.outputs.files_exists == 'true'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "docs: Autogenerate keymap layout diagram"
          file_pattern: "${{ steps.paths.outputs.output_svg }} ${{ steps.paths.outputs.output_yaml }}"
          # Optional amend/force push options here
